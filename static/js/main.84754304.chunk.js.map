{"version":3,"sources":["components/Main.js","components/Winner.js","App.js","reportWebVitals.js","index.js"],"names":["Main","table","setTable","nextMove","setNextMove","winner","setWinner","checkWinner","row","column","move","a","i","allGood","j","c","r","length","onClick","newTable","map","index","piece","className","cell","Winner","App","initialState","useState","resetTable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84754304.chunk.js","sourcesContent":["function Main({ table, setTable, nextMove, setNextMove, winner, setWinner }) {\r\n    const checkWinner = async (row, column, move) => {\r\n        // Horizontal\r\n        for(let i=-3;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<4;j++) {\r\n                if(!(column+i+j===column) && table[row][column+i+j] !== move) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n        //Vertical\r\n        if(row <= 2) {\r\n            let allGood = true\r\n            for(let i=1;i<4;i++) {\r\n                if(table[row+i][column] !== move) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n\r\n        //Diagonal\r\n        for(let i=-3;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<4;j++) {\r\n                const r = row + i + j;\r\n                const c = column + i + j;\r\n                if(r < 0 || r >= table.length || c < 0 || c >= table[0].length || (!(r === row && c === column) && table[r][c] !== move)) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n        \r\n        for(let i=-3;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<4;j++) {\r\n                const r = row + i + j;\r\n                const c = column - i - j;\r\n                if(r < 0 || r >= table.length || c < 0 || c >= table[0].length || (!(r === row && c === column) && table[r][c] !== move)) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }  \r\n    }\r\n\r\n    const onClick = async (column) => {\r\n        if(!winner) {\r\n            for(let i=table.length-1;i>=0;i--) {\r\n                if(table[i][column] === 0) {\r\n                    const newTable = table.map( (row, index) =>\r\n                        index === i ? row.map( (piece, index) =>\r\n                            index === column ? nextMove : piece\r\n                        ) : row\r\n                    )\r\n                    setTable(newTable)\r\n                    await checkWinner(i, column, nextMove)\r\n                    setNextMove(nextMove === 1 ? 2 : 1)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='table'>\r\n            {table.map((row, index) => \r\n                <div key={index}>\r\n                    <span className='row-start' />\r\n                    {row.map((cell, index) => \r\n                        <span key={index} className={'cell '+(cell ? (cell === 1 ? 'blue' : 'red') : '')} onClick={() => onClick(index)}>\r\n                        </span>\r\n                        )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","function Winner({ winner }) {\r\n    return (\r\n        <div>\r\n            {winner !== 0 &&\r\n            <span className={\"winner-text \"+(winner === 1 ? 'blue' : 'red')}>Winner</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Winner\r\n","import './App.css';\nimport Main from './components/Main'\nimport Winner from './components/Winner'\nimport { useState } from 'react'\n\nfunction App() {\n  const initialState = [\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n  ]\n  const [table, setTable] = useState(initialState)\n  const [nextMove, setNextMove] = useState(1)\n  const [winner, setWinner] = useState(0)\n\n  const resetTable = async () => {\n    setWinner(0)\n    setTable(initialState)\n  }\n\n  return (\n    <div className='app'>\n      <h1>Connect 4 <button className='btn' onClick={resetTable}>Reset</button></h1>\n      <Main table={table} setTable={setTable} nextMove={nextMove} setNextMove={setNextMove} winner={winner} setWinner={setWinner}></Main>\n      <Winner winner={winner} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}