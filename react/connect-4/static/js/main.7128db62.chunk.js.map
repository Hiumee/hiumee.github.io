{"version":3,"sources":["components/Main.js","components/Winner.js","App.js","reportWebVitals.js","index.js"],"names":["Main","table","setTable","nextMove","setNextMove","winner","setWinner","toConnect","checkWinner","row","column","move","a","i","allGood","j","length","c","r","onClick","newTable","map","index","piece","maxNumber","Math","max","cellStyle","height","width","maxHeight","maxWidth","rowStyle","className","style","lineHeight","cell","Winner","rows","columns","App","initialState","Array","fill","useState","toConnectState","setToConnect","resetTable","console","log","onChange","event","parseInt","target","value","type","defaultValue","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7128db62.chunk.js","sourcesContent":["function Main({ table, setTable, nextMove, setNextMove, winner, setWinner, toConnect }) {\r\n    const checkWinner = async (row, column, move) => {\r\n        // Horizontal\r\n        for(let i=-toConnect+1;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<toConnect;j++) {\r\n                if(!(column+i+j===column) && table[row][column+i+j] !== move) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n        //Vertical\r\n        if(row <= table.length-toConnect) {\r\n            let allGood = true\r\n            for(let i=1;i<toConnect;i++) {\r\n                if(table[row+i][column] !== move) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n\r\n        //Diagonal\r\n        for(let i=-toConnect+1;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<toConnect;j++) {\r\n                const r = row + i + j;\r\n                const c = column + i + j;\r\n                if(r < 0 || r >= table.length || c < 0 || c >= table[0].length || (!(r === row && c === column) && table[r][c] !== move)) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }\r\n        \r\n        for(let i=-toConnect+1;i<=0;i++) {\r\n            let allGood = true\r\n            for(let j=0;j<toConnect;j++) {\r\n                const r = row + i + j;\r\n                const c = column - i - j;\r\n                if(r < 0 || r >= table.length || c < 0 || c >= table[0].length || (!(r === row && c === column) && table[r][c] !== move)) {\r\n                    allGood = false\r\n                }\r\n            }\r\n            if(allGood) {\r\n                setWinner(move)\r\n                return\r\n            }\r\n        }  \r\n    }\r\n\r\n    const onClick = async (column) => {\r\n        if(!winner) {\r\n            for(let i=table.length-1;i>=0;i--) {\r\n                if(table[i][column] === 0) {\r\n                    const newTable = table.map( (row, index) =>\r\n                        index === i ? row.map( (piece, index) =>\r\n                            index === column ? nextMove : piece\r\n                        ) : row\r\n                    )\r\n                    setTable(newTable)\r\n                    await checkWinner(i, column, nextMove)\r\n                    setNextMove(nextMove === 1 ? 2 : 1)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const maxNumber = Math.max(table.length, table[0].length)\r\n\r\n    const cellStyle = { \r\n        height: 50/maxNumber + \"vh\",\r\n        width: 50/maxNumber + \"vh\",\r\n        maxHeight: 50/maxNumber + \"vw\",\r\n        maxWidth: 50/maxNumber + \"vw\",\r\n    }\r\n\r\n    const rowStyle = { \r\n        height: 50/maxNumber + \"vh\",\r\n        maxHeight: 50/maxNumber + \"vw\",\r\n    }\r\n\r\n    return (\r\n        <div className='table'>\r\n            {table.map((row, index) => \r\n                <div style={{lineHeight: 0}} key={index}>\r\n                    <span style={rowStyle} className='row-start' />\r\n                    {row.map((cell, index) => \r\n                        <span style={cellStyle} key={index} className={'cell '+(cell ? (cell === 1 ? 'blue' : 'red') : '')} onClick={() => onClick(index)}>\r\n                        </span>\r\n                        )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","function Winner({ winner }) {\r\n    return (\r\n        <div>\r\n            {winner !== 0 &&\r\n            <span className={\"winner-text \"+(winner === 1 ? 'blue' : 'red')}>Winner</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Winner\r\n","import './App.css';\nimport Main from './components/Main'\nimport Winner from './components/Winner'\nimport { useState } from 'react'\n\nlet rows = 6;\nlet columns = 7;\nlet toConnect = 4;\n\nfunction App() {\n  const initialState = Array(rows).fill().map(()=>Array(columns).fill(0))\n  const [toConnectState, setToConnect] = useState(4)\n\n  const [table, setTable] = useState(initialState)\n  const [nextMove, setNextMove] = useState(1)\n  const [winner, setWinner] = useState(0)\n\n  const resetTable = async () => {\n    setWinner(0)\n    console.log(rows, columns)\n    setTable(Array(rows).fill().map(()=>Array(columns).fill(0)))\n    setToConnect(toConnect)\n  }\n\n  return (\n    <div className='app'>\n      <div>\n        <span className='title'>Connect <input onChange={event => toConnect = Math.max(4, parseInt(event.target.value))} className='number-input' type='number' defaultValue={4} min={4}></input></span>\n        <span className='input-span'>Size <input onChange={event => rows = Math.max(4, parseInt(event.target.value))} className='number-input' type='number' defaultValue={6} min={4}></input> x <input onChange={event => columns = Math.max(4, parseInt(event.target.value))} className='number-input' type='number' defaultValue={7} min={4}></input></span>\n        <button className='btn' onClick={resetTable}>Reset</button>\n      </div>\n      <Main table={table} setTable={setTable} nextMove={nextMove} setNextMove={setNextMove} winner={winner} setWinner={setWinner} toConnect={toConnectState}></Main>\n      <Winner winner={winner} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}