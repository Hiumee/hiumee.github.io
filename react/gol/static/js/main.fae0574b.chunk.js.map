{"version":3,"sources":["SpeedBar.js","Simulation.js","App.js","reportWebVitals.js","index.js"],"names":["SpeedBar","tickSpeed","setTickSpeed","className","type","min","max","id","onChange","event","target","value","oldTickSpeed","interval","status","Simulation","maxNumber","Math","cellStyle","height","width","maxHeight","maxWidth","countCells","x","y","count","i","j","includes","getCell","document","getElementById","lightCell","killCell","toggleCell","cell","newStatus","list","element","newList","forEach","e","push","removeElementFromList","l","split","Number","clearInterval","setInterval","newState","tickOnce","rows","row","style","onClick","getAttribute","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oRAWeA,MATf,YAA8C,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,aAC1B,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAOA,UAAU,iBAAiBC,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,GAAG,aAAaC,SAAU,SAAAC,GAAK,OAAIP,EAAaO,EAAMC,OAAOC,UAC7H,uBAAMR,UAAU,eAAhB,+BAAkDF,S,OCJ1DW,G,MAAe,GACfC,EAAW,KAEXC,EAAS,GAqIEC,MAnIf,YAAkC,IAAbd,EAAY,EAAZA,UAGXe,EAAYC,KAAKX,IAFT,GACC,IAGTY,EAAY,CACdC,OAAQ,GAAGH,EAAY,KACvBI,MAAO,GAAGJ,EAAY,KACtBK,UAAW,GAAGL,EAAY,KAC1BM,SAAU,GAAGN,EAAY,MAa7B,SAASO,EAAWC,EAAGC,GAEnB,IADA,IAAIC,EAAQ,EACJC,GAAG,EAAEA,EAAE,EAAEA,IACb,IAAI,IAAIC,GAAG,EAAEA,EAAE,EAAEA,IACN,IAAJD,GAAa,IAAJC,GACJJ,EAAEG,GAAK,GAAKH,EAAEG,EA1BpB,IA0BiCF,EAAEG,GAAK,GAAKH,EAAEG,EAzB9C,IA0BQd,EAAOe,SAAUL,EAAEG,EAAG,KAAKF,EAAEG,KAC5BF,IAOpB,OAAOA,EAGX,SAASI,EAAQN,EAAGC,GAChB,OAAOM,SAASC,eAAeR,EAAI,IAAIC,GAG3C,SAASQ,EAAUT,EAAGC,GACPK,EAAQN,EAAGC,GACjBtB,UAAY,OAGrB,SAAS+B,EAASV,EAAGC,GACNK,EAAQN,EAAGC,GACjBtB,UAAY,QAuDrB,SAASgC,EAAWC,GAChB,IAAMC,EAAYvB,EAAOe,SAASO,GA9FtC,SAA+BE,EAAMC,GACjC,IAAIC,EAAU,GAMd,OALAF,EAAKG,SAAQ,SAAAC,GACNA,IAAMH,GACLC,EAAQG,KAAKD,MAGdF,EAuFmCI,CAAsB9B,EAAQsB,GAAtD,sBAAkEtB,GAAlE,CAA0EsB,IACxFS,EAAIT,EAAKU,MAAM,KACftB,EAAIuB,OAAOF,EAAE,IACbpB,EAAIsB,OAAOF,EAAE,IACjB/B,EAAOe,SAASO,GAAQF,EAASV,EAAEC,GAAKQ,EAAUT,EAAEC,GACpDX,EAASuB,EApBTzB,IAAiBX,IACjBW,EAAeX,EAEA,MAAZY,GACCmC,cAAcnC,GAGD,MAAdZ,IACCY,EAAWoC,aAAY,YA9C/B,WACI,IAAIC,EAAW,GAEfpC,EAAO2B,SAAQ,SAACF,GAKZ,IAJA,IAAIM,EAAIN,EAAQO,MAAM,KAClBtB,EAAIuB,OAAOF,EAAE,IACbpB,EAAIsB,OAAOF,EAAE,IAETlB,GAAG,EAAEA,EAAE,EAAEA,IACb,IAAI,IAAIC,GAAG,EAAEA,EAAE,EAAEA,IACN,IAAJD,GAAa,IAAJC,GACJJ,EAAEG,GAAK,GAAKH,EAAEG,EA/DxB,IA+DqCF,EAAEG,GAAK,GAAKH,EAAEG,EA9DlD,KA+Dcd,EAAOe,SAAUL,EAAEG,EAAG,KAAKF,EAAEG,KAAQsB,EAASrB,SAAUL,EAAEG,EAAG,KAAKF,EAAEG,KAA+B,IAAxBL,EAAWC,EAAEG,EAAEF,EAAEG,KAC7FsB,EAASP,KAAMnB,EAAEG,EAAG,KAAKF,EAAEG,IAC3BK,EAAUT,EAAEG,EAAGF,EAAEG,QAQzCd,EAAO2B,SAAQ,SAACF,GACZ,IAAIM,EAAIN,EAAQO,MAAM,KAClBtB,EAAIuB,OAAOF,EAAE,IACbpB,EAAIsB,OAAOF,EAAE,IAEXnB,EAAQH,EAAWC,EAAGC,GACf,IAAVC,GAAyB,IAAVA,EACdwB,EAASP,KAAKnB,EAAE,IAAIC,GAEpBS,EAASV,EAAGC,MAIpBX,EAASoC,EAYDC,KACD,IAAKlD,KAehB,IAFA,IAAImD,EAAO,GAEHzB,EAAE,EAAEA,EAnHE,GAmHMA,IAAK,CAErB,IADA,IAAI0B,EAAM,GACFzB,EAAE,EAAEA,EApHD,GAoHUA,IACjByB,EAAIV,KAAK,oBAAgBxC,UAAWW,EAAOe,SAASF,EAAE,IAAIC,GAAK,OAAS,QAAS,WAAU,CAACD,EAAEC,GAAIrB,GAAIoB,EAAE,IAAIC,EAAG0B,MAAOpC,EAAWqC,QAAS,SAAA9C,GAAK,OAAI0B,EAAW1B,EAAMC,OAAO8C,aAAa,eAAtK,CAAC7B,EAAEC,KAEzBwB,EAAKT,KAAK,6BAAaU,GAAJ1B,IAGvB,OACI,qBAAKxB,UAAU,aAAf,SACI,uBAAOA,UAAU,WAAjB,SAA6BiD,OCrH1BK,MAXf,WACE,MAAkCC,mBAAS,GAA3C,mBAAOzD,EAAP,KAAkBC,EAAlB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAUF,UAAWA,EAAWC,aAAcA,IAC9C,cAAC,EAAD,CAAYD,UAAWA,QCCd0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.fae0574b.chunk.js","sourcesContent":["import './SpeedBar.css';\r\n\r\nfunction SpeedBar({tickSpeed, setTickSpeed}) {\r\n    return (\r\n        <div className=\"SpeedBar\">\r\n            <input className=\"SpeedBarSlider\" type=\"range\" min=\"0\" max=\"20\" id=\"speedRange\" onChange={event => setTickSpeed(event.target.value)}></input>\r\n            <span className=\"SpeedBarText\">Ticks per second: {tickSpeed}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpeedBar;\r\n","import './Simulation.css'\r\n\r\nlet oldTickSpeed = 0\r\nlet interval = null\r\n// use local variable, avoids full component refresh\r\nlet status = []\r\n\r\nfunction Simulation({tickSpeed}) {\r\n    const width = 30;\r\n    const height = 30;\r\n    const maxNumber = Math.max(width, height)\r\n\r\n    const cellStyle = { \r\n        height: 50/maxNumber + \"vh\",\r\n        width: 50/maxNumber + \"vh\",\r\n        maxHeight: 50/maxNumber + \"vw\",\r\n        maxWidth: 50/maxNumber + \"vw\"\r\n    }\r\n\r\n    function removeElementFromList(list, element) {\r\n        let newList = []\r\n        list.forEach(e => {\r\n            if(e !== element) {\r\n                newList.push(e)\r\n            }\r\n        });\r\n        return newList\r\n    }\r\n\r\n    function countCells(x, y) {\r\n        let count = 0\r\n        for(let i=-1;i<2;i++) {\r\n            for(let j=-1;j<2;j++){\r\n                if(i!==0 || j!==0) {\r\n                    if (x+i >= 0 && x+i < width && y+j >= 0 && y+j < height) {\r\n                        if(status.includes((x+i)+','+(y+j))) {\r\n                            count++\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return count\r\n    }\r\n\r\n    function getCell(x, y) {\r\n        return document.getElementById(x + 100*y)\r\n    }\r\n\r\n    function lightCell(x, y) {\r\n        let cell = getCell(x, y)\r\n        cell.className = 'blue'\r\n    }\r\n\r\n    function killCell(x, y) {\r\n        let cell = getCell(x, y)\r\n        cell.className = 'white'\r\n    }\r\n\r\n    function tickOnce() {\r\n        let newState = []\r\n        //light up\r\n        status.forEach((element) => {\r\n            let l = element.split(',')\r\n            let x = Number(l[0])\r\n            let y = Number(l[1])\r\n\r\n            for(let i=-1;i<2;i++) {\r\n                for(let j=-1;j<2;j++) {\r\n                    if(i!==0 || j!==0) {\r\n                        if (x+i >= 0 && x+i < width && y+j >= 0 && y+j < height) {\r\n                            if (!status.includes((x+i)+','+(y+j)) && !newState.includes((x+i)+','+(y+j)) && countCells(x+i,y+j) === 3) {\r\n                                newState.push((x+i)+','+(y+j))\r\n                                lightCell(x+i, y+j)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        //kill\r\n        status.forEach((element) => {\r\n            let l = element.split(',')\r\n            let x = Number(l[0])\r\n            let y = Number(l[1])\r\n\r\n            const count = countCells(x, y);\r\n            if(count === 2 || count === 3) {\r\n                newState.push(x+','+y)\r\n            } else {\r\n                killCell(x, y);\r\n            }\r\n        })\r\n\r\n        status = newState\r\n    }\r\n\r\n    if (oldTickSpeed !== tickSpeed) {\r\n        oldTickSpeed = tickSpeed\r\n        \r\n        if(interval != null) {\r\n            clearInterval(interval)\r\n        }\r\n\r\n        if(tickSpeed !== '0') {\r\n            interval = setInterval(() => {\r\n                tickOnce()\r\n            }, 1000/tickSpeed)\r\n        }\r\n    }\r\n\r\n    function toggleCell(cell) {\r\n        const newStatus = status.includes(cell) ? removeElementFromList(status, cell) : [...status, cell]\r\n        let l = cell.split(',')\r\n        let x = Number(l[0])\r\n        let y = Number(l[1])\r\n        status.includes(cell) ? killCell(x,y) : lightCell(x,y)\r\n        status = newStatus\r\n    }\r\n    \r\n    let rows = []\r\n\r\n    for(var i=0;i<width;i++) {\r\n        let row = []\r\n        for(var j=0;j<height;j++) {\r\n            row.push(<td key={[i,j]} className={status.includes(i+','+j) ? 'blue' : 'white'} data-key={[i,j]} id={i+100*j} style={cellStyle} onClick={event => toggleCell(event.target.getAttribute('data-key'))}></td>)\r\n        }\r\n        rows.push(<tr key={i}>{row}</tr>)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Simulation\">\r\n            <table className=\"SimTable\">{rows}</table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Simulation;\r\n","import './App.css';\nimport SpeedBar from './SpeedBar';\nimport Simulation from './Simulation';\nimport { useState } from 'react'\n\nfunction App() {\n  const [tickSpeed, setTickSpeed] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <SpeedBar tickSpeed={tickSpeed} setTickSpeed={setTickSpeed}/>\n      <Simulation tickSpeed={tickSpeed}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}